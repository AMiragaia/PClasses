// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2021 15:18:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          teste1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module teste1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg i0;
reg i1;
reg i2;
reg i3;
reg i4;
reg i5;
reg i6;
reg i7;
reg [2:0] S;
// wires                                               
wire y;

// assign statements (if any)                          
teste1 i1 (
// port map - connection between master ports and signals/registers   
	.i0(i0),
	.i1(i1),
	.i2(i2),
	.i3(i3),
	.i4(i4),
	.i5(i5),
	.i6(i6),
	.i7(i7),
	.S(S),
	.y(y)
);
initial 
begin 
#1000000 $finish;
end 

// i0
initial
begin
	i0 = 1'b0;
end 

// i1
initial
begin
	i1 = 1'b0;
end 

// i2
initial
begin
	i2 = 1'b0;
end 

// i3
initial
begin
	i3 = 1'b0;
end 

// i4
initial
begin
	i4 = 1'b0;
end 

// i5
initial
begin
	i5 = 1'b0;
end 

// i6
initial
begin
	i6 = 1'b0;
end 

// i7
initial
begin
	i7 = 1'b0;
end 
// S[ 2 ]
initial
begin
	repeat(2)
	begin
		S[2] = 1'b0;
		S[2] = #200000 1'b1;
		# 200000;
	end
	S[2] = 1'b0;
end 
// S[ 1 ]
always
begin
	S[1] = 1'b0;
	S[1] = #100000 1'b1;
	#100000;
end 
// S[ 0 ]
always
begin
	S[0] = 1'b0;
	S[0] = #50000 1'b1;
	#50000;
end 
endmodule

