Big Picture Computer-

CPU -- MEMÓRIA -- I/O DEVICES - SYSTEM BUS

O CPU é um sistema com três blocos fundamentais, ALU, Registos e Unidade de controlo.

ALU - realiza as operações aritméticas e lógicas mais comuns ( por exemplo, adição, multiplicação, divisão, AND, OR, NOR , XOR)
Registos - elementos de armazenamento (memória) localizdos dentro do CPU
- Usados para diversos fins
- Um registo armazena uma única unidade de informação (ex. se o registo for de 8 bits pode armazenar 1 byte)

Unidade de controlo - responsável pela coordenação dos vários blocos do CPU, durante a execução de uma instrução.

Na prespetiva do utilizador, os registos mais importantes são:
- Program Counter (PC)
- Registos de utilização geral, para armazenamento de dados (geralmente em número muito reduzido: por exemplo 32)

Program Counter
-Usado para guardar o endereço da memória onde se situa a próxima instrução a ser executada
-No CPU, após a leitura do código de uma instrução, o valor do PC é atualizado para apontar para a instrução seguinte

Os registos de utilização geral são, habitualmente referenciados por nomes(e.g, no MIPS: $0,$1,...,$31)

Conjunto de instruções básicas

add $1,$5,$7 #$1 = $5 + $7
sub $3,$4,$2 #$3 = $4 - $2
ori $6,$0,0x1234 # $6 = $0 | 0x1234
				 # $6 = 0x1234
É gerado
-Por um compilador, quando o programa é escrito numa linguagem de alto nível
-Por um assembler quando o programa é escrito em linguagem assembly

O MIPS
É um microprocessador de 32 bits, isto é:
-cada registo interno armazena uma word de 32 bits
-a ALU opera sobre quantidades de 32 bits
Tem 32 registos internos de uso geral, com a designação nativa em assembly $0,$1,$2,...,$31

Estes registos são normalmente referenciados nos programas por um nome lógico (facilita a aplicação de uma convenção de utilização, a ver mais tarde)
- $a0,$a1,$a2,$a2
- $t0,$t1,$t2,...,$t9
- $s0,$s1,$s2,...,$s7
- $v0,$v1
- $ra
O registo $0 é um caso particular, uma vez que não permite armzaento e, quando lido, retorna sempre o valor 0

Operações aritméticas
add Rdst,Rsrc1,Rsrc2 # Rdst = Rsrc1 + Rsrc2
- Ex: add $t0,$a0,$t1
sub Rdst,Rsrc1,Rsrc2 # Rdst = Rsrc1 - Rsrc2
- Ex: sub $a1,$s0,$t2
addi Rdst,Rsrc1,Imm # Rdst = Rsrc1 + Imm
- Ex: addi $t5,$a3,0x13F4

Operações lógicas bitwise
and Rdst,Rsrc1,Rsrc2 # Rdst = Rsrc1 & Rsrc2
or Rdst,Rsrc1,Rsrc2 # Rdst = Rsrc1 | Rsrc2
ori Rdst,Rsrc1,Imm # Rdst = Rsrc1 | Imm

Ex: ori $v0,$0,0x12 #$v0 = 0x12 (zero é o elemento neutro do OR)
(Rdst - registo destino; Rsrc - registo fonte)

Principais regras sintáticas:
1 Linguagem orientada à linha. Um linha pode conter:
- Nada
- Um label e/ou uma direta e/ou um comentário
- Um label e/ou uma instrução e/ou um comentário

2 Labels
- São identificadores únicos terminados com o caracter o caracter ':'
- Devem obrigatoriamente começar na primeira coluna (apenas os comentários podem também começar nesta coluna)
- O primeiro caracter tem ,obrigatoriamente, de ser uma letra ou o símbolo '_'
- Os restantes caracteres podem ser letras, algarismos ou o símbolo '_'
- Não podem conter separadores (espaçosm, vírgulas e/ou tabs) entre o nome e o terminador ':'

3 Diretivas (ordens para o Assembler)
- Começam obrigatoriamente pelo caracter '.'
- Só podem começar a partir da segunda coluna
- Entre a diretiva e a expressão seguinte(quando se aplique), devem existir espaços(s) e/ou tabs, mas não vírgulas
- Nas diretivas que aceitam múltiplas expressões, estas têm de estar separadas por uma únicas vírgula (podem conter também espaços e tabs)

4 Intruções
- Podem conter apenas uma expressão (mnemónica) e entre zero a três operandos
- Só podem começar a partir da segunda coluna
- Entre a instrução e o primeiro operando(quando se aplique), deve(m) existir espaços(s) e/ou tabs, mas não vírgulas
- Nas instruções com mais do que um operando, estes têm de estar separadas por uma única vírgula (podem conter também espaços e tabs)

MARS - um ambiente de simulação para o MIPS

System Calls são funções do sistema operativo (SO) que implementam serviços básticos de I/O
-imprimir uma string no ecrã, ler um inteiro do teclado, ler uma string do teclado, imprimir um inteiro, etc.
O MARS disponibiliza cerca de 50 system call
- O registo $v0 é usado para identificar a system call
- Os registos $a0 a $a3 são usados para transferir valores (argumentos) para a system call
- O system call pode usar $v0 para devolver um valor
Exemplo
 ori $v0,$0,11	# $v0,11 (system call print_char())
 ori $a0,$0,0x31 # $a0 = 0x31 = '1'
 syscall # chama a system call 

 Como funciona um system call, na prespetiva do utilizador:
 O Sistema Operativo verifica $v0 para saber qual a tarefa a realizar
 Se necessário, o Sistema Operativo lê os valores de entrada dos registos $a0 a $a3
 O Sistema Operativo executa a tarefa
 O Sistema Operativo coloca o resultado do registo $v0
 
Intrução Assembly	Operação em C

# entre registos
and	$Rdest,$Rsrc1,$Rsrc2 #$Rdest = $Rsrc1 & Rsrc2
or $Rdest,$Rsrc1,$Rsrc2 #$Rdest = $Rsrc1 | Rsrc2
nor $Rdest,$Rsrc1,$Rsrc2 #$Rdest = ~($Rsrc | Rsrc2)
xor $Rdest,$Rsrc1,$Rsrc2 #Rdest = $Rsrc1 ^ Rsrc2

# entre 1 registo e uma constante
andi $Rdest,$Rsrc1,imm #$Rdest = $Rsrc1 & imm
ori $Rdest,$Rsrc1,imm #$Rdest = $Rsrc1 | imm
xori $Rdest,$Rsrc1,imm #$Rdest = $Rsrc1 ^ imm

Deslocamento (shift) lógico e aritmético

Intrução Assembly
sll $Rdest,$Rsrc1,imm	#$Rdest = $Rsrc1 << imm
srl $Rdest,$Rsrc1,imm	#$Rdest = $Rsrc >> imm
sra $Rdest,$Rsrc1,imm   #$Rdest = $Rsrc \ 2^imm

Significado das mnemónicas
sll Shift Left Logical 
srl Shift Right Logical 
sra Shift Right Arithmetic

Algumas diretivas para o Assembler
#Exemplo:
		.data
str1:	.asciiz"Introduza 2 numeros\n"
		.eqv print_string,4
		.text
		.globl main

main:	...

.data
Informa o Assembler que as linhas subsequentes contêm infromação relativa ao segmento de dados

str1:	.asciiz"Introduza 2 numeros\n"
Diz ao Assembler que, a partir do endereço correspondentes a "str1:" deverá inicializar o número de bytes necessários com o código ASCII da string que está entre aspas. Essa string deverá terminar com o carácter null(´\0´)

.eqv print_string,4
Diz ao Assembler que, sempre que encontrar a expressão "print_string", deverá substuí-la pela constante 4
.text
Informa o Assembler que as linhas subsequentes contêm informação relativa ao segmento de texto (instruções)
.globl main
Informa o Assemble que "main:" é um label global(visível a partir de outro código)
