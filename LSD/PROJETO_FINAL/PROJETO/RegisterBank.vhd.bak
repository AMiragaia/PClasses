library IEEE;
use IEEE.std_logic_1164.all;

entity RegisterBank is 
    port (
        WrData : in std_logic_vector(7 downto 0);
        WE : in std_logic;
        DataOut1 : out std_logic_vector(7 downto 0);
        DataOut2 : out std_logic_vector(7 downto 0);
        DataOut3 : out std_logic_vector(7 downto 0);
        DataOut4 : out std_logic_vector(7 downto 0));
end RegisterBank;

architecture behavioral of RegisterBank is
    signal DataIn1 : std_logic_vector(7 downto 0);
    signal DataIn2 : std_logic_vector(7 downto 0);
    signal DataIn3 : std_logic_vector(7 downto 0);
    signal DataIn4 : std_logic_vector(7 downto 0);

begin
    
    register8bits1 : entity work.Register8Bits(behavioral);
        port map (
            WrData : DataIn1,
            WE : WE,
            DataOut : DataOut1);
    if (WE = "0001") then
        DataIn1 <= WrData;
    end if;
    register8bits2 : entity work.Register8Bits(behavioral);
        port map (
            WrData : DataIn2,
            WE : WE,
            DataOut : DataOut2);
    if (WE = "0010") then
        DataIn2 <= WrData;
    end if;
    register8bits3 : entity work.Register8Bits(behavioral);
        port map (
            WrData : DataIn3,
            WE : WE,
            DataOut : DataOut3);
        DataIn3 <= DataOut;
    if (WE = "0100") then
        DataIn3 <= WrData;
    end if;
    register8bits4 : entity work.Register8Bits(behavioral);
        port map (
            WrData : DataIn4,
            WE : WE,
            DataOut : DataOut4);
            DataIn4 <= DataOut;
    if (WE = "1000") then
        DataIn4 <= WrData;
    end if;
end behavioral;      

        
