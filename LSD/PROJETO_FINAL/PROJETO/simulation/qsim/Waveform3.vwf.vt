// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2022 10:29:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Adder9
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Adder9_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cin;
reg [8:0] operand1;
reg [7:0] operand2;
// wires                                               
wire cout;
wire [9:0] Result;

// assign statements (if any)                          
Adder9 i1 (
// port map - connection between master ports and signals/registers   
	.cin(cin),
	.cout(cout),
	.operand1(operand1),
	.operand2(operand2),
	.Result(Result)
);
initial 
begin 
#1000000 $finish;
end 

// cin
initial
begin
	cin = 1'b0;
end 
// operand1[ 8 ]
initial
begin
	operand1[8] = 1'b0;
end 
// operand1[ 7 ]
initial
begin
	operand1[7] = 1'b0;
end 
// operand1[ 6 ]
initial
begin
	operand1[6] = 1'b0;
end 
// operand1[ 5 ]
initial
begin
	operand1[5] = 1'b0;
end 
// operand1[ 4 ]
initial
begin
	operand1[4] = 1'b0;
end 
// operand1[ 3 ]
initial
begin
	operand1[3] = 1'b0;
end 
// operand1[ 2 ]
initial
begin
	operand1[2] = 1'b0;
end 
// operand1[ 1 ]
initial
begin
	operand1[1] = 1'b0;
end 
// operand1[ 0 ]
initial
begin
	operand1[0] = 1'b0;
end 
// operand2[ 7 ]
initial
begin
	operand2[7] = 1'b0;
end 
// operand2[ 6 ]
initial
begin
	operand2[6] = 1'b0;
end 
// operand2[ 5 ]
initial
begin
	operand2[5] = 1'b0;
end 
// operand2[ 4 ]
initial
begin
	operand2[4] = 1'b0;
end 
// operand2[ 3 ]
initial
begin
	operand2[3] = 1'b0;
end 
// operand2[ 2 ]
initial
begin
	operand2[2] = 1'b0;
end 
// operand2[ 1 ]
initial
begin
	operand2[1] = 1'b0;
end 
// operand2[ 0 ]
initial
begin
	operand2[0] = 1'b0;
end 
endmodule

