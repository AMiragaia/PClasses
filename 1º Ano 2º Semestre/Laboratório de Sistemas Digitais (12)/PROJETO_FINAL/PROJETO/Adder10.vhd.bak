library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Adder10 is
  port (cin : in std_logic;
		  operand1 : in std_logic_vector(9 downto 0);
        operand2 : in std_logic_vector(7 downto 0);
        cout : out std_logic;
		  Result   : out std_logic_vector(9 downto 0));
end Adder10;

architecture Behavioral of Adder10 is
    signal carryOut : std_logic_vector(8 downto 0);
    begin
        	bit0 : entity work.FullAdder(behavioral)
			 port map(a => operand1(0),
						 b => operand2(0),
						 cin => cin,
						 s => Result(0),
						 cout => carryOut(0));
						
			bit1 : entity work.FullAdder(behavioral)
			 port map(a => operand1(1),
						 b => operand2(1),
						 cin => cin,
						 s => Result(1),
						 cout => carryOut(1)); 
		  
			bit2 : entity work.FullAdder(behavioral)
			 port map(a => operand1(2),
						 b => operand2(2),
						 cin => cin,
						 s => Result(2),
						 cout => carryOut(2));
			bit3 : entity work.FullAdder(behavioral)
			 port map(a => operand1(3),
						 b => operand2(3),
						 cin => cin,
						 s => Result(3),
						 cout => carryOut(3));
			
			bit4 : entity work.FullAdder(behavioral)
			 port map(a => operand1(4),
						 b => operand2(4),
						 cin => cin,
						 s => Result(4),
						 cout => carryOut(4));
			bit5 : entity work.FullAdder(behavioral)
			 port map(a => operand1(5),
						 b => operand2(5),
						 cin => cin,
						 s => Result(5),
						 cout => carryOut(5));
			bit6 : entity work.FullAdder(behavioral)
			 port map(a => operand1(6),
						 b => operand2(6),
						 cin => cin,
						 s => Result(6),
						 cout => carryOut(6));
			bit7 : entity work.FullAdder(behavioral)
			 port map(a => operand1(7),
						 b => operand2(7),
						 cin => cin,
						 s => Result(7),
						 cout => carryOut(7));
			bit8 : entity work.FullAdder(behavioral)
			 port map(a => operand1(8),
						 b => '0',
						 cin => cin,
						 s => Result(8),
						 cout => carryOut(8));
			bit9 : entity work.FullAdder(behavioral)
			 port map(a => operand1(9),
						 b => '0',
						 cin => cin,
						 s => Result(9),
						 cout => carryOut(9));
						 Result(9) <= carryout(9);
			
						 
				
			
						 
			
        
    end Behavioral;
